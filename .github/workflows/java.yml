name: Build OddsAPI app

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "oddsAPI"
  cancel-in-progress: false


jobs:
  # Label of the container job
  build:
    name: Build and test app

    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
      BOOKMAKERS: $BOOKMAKERS
      MARKETS: $MARKETS
      CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
      ISSUER_URI: ${{ secrets.ISSUER_URI }}
      AUDIENCE: ${{ secrets.AUDIENCE }}

    #    services:
    #      postgres_db:
    #        image: postgres
    #        env:
    #          POSTGRES_USER: ${{ env.DB_USERNAME }}
    #          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
    #          POSTGRES_DB: odds
    #        ports:
    #          - 5432:5432
    #          # Set health checks to wait until postgres has started
    #        options: >-
    #          --health-cmd pg_isready
    #          --health-interval 10s
    #          --health-timeout 5s
    #          --health-retries 5

    steps:
      - name: Check out Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests=true

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_ENV_1: ${{ secrets.JF_ENV_1 }}

      - name: Deploy to Artifactory
        run: |
          jf mvn-config
          jf mvn deploy 

#      - name: Build Tag and push Docker Image
#        env:
#          IMAGE_NAME: bhanna.jfrog.io/bhanna-docker/bhanna-odds-api:${{ github.run_number }}
#        run: |
#          jf docker build -t $IMAGE_NAME .
#          jf docker push $IMAGE_NAME
#
#      - name: Publish Build info With JFrog CLI
#        env:
#          # Generated and maintained by GitHub
#          JFROG_CLI_BUILD_NAME: bhanna-OddsAPI
#          # JFrog organization secret
#          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
#        run: |
#          # Export the build name and build number
#          # Collect environment variables for the build
#          jf rt build-collect-env
#          # Collect VCS details from git and add them to the build
#          jf rt build-add-git
#          # Publish build info
#          jf rt build-publish


#      ###################      PUSH TO DOCKER      #####################
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          push: true
#          tags: bhanna1693/oddsAPI
#
#
#      ###################      PUSH TO AWS ECR      #####################
#
#      - name: configure aws credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: arn:aws:iam::711335785459:role/GitHubAction-AssumeRoleWithAction
#          role-session-name: GitHub_to_AWS_via_FederatedOIDC
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          mask-password: 'true'
#
#      - name: Build, tag, and push docker image to Amazon ECR
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: odds-api
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $REGISTRY/$REPOSITORY:latest .
#          docker push $REGISTRY/$REPOSITORY:latest
#          docker tag $REGISTRY/$REPOSITORY:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
